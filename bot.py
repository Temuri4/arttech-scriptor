# bot.py
# Telegram-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Arttech Scriptor

import logging
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from corpbooks.arttech_scriptor import ArttechScriptor
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
assistant = ArttechScriptor()

# –ö–æ–º–∞–Ω–¥—ã Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Arttech Scriptor ü§ñ\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /ask <–≤–æ–ø—Ä–æ—Å>, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /list, /info, /help."
    )

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = " ".join(context.args)
    if not question:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    try:
        result = assistant.process_command(f"/ask {question}")
        await update.message.reply_text(result[:4000])  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /ask: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = assistant.process_command("/list")
    await update.message.reply_text(result[:4000])

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /info NIIPH")
        return
    code = context.args[0]
    result = assistant.process_command(f"/info {code}")
    await update.message.reply_text(result[:4000])

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /ask, /list, /info")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback))

    logger.info("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
